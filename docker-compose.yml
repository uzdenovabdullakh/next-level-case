services:
  postgres:
    image: postgres:13
    container_name: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 10s
      timeout: 30s
      retries: 15
      start_period: 30s
    networks:
      - app-network

  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: api
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      NODE_ENV: ${NODE_ENV}
      DATABASE_URL: ${DATABASE_URL}
      RABBITMQ_URL: ${RABBITMQ_URL}
      RABBITMQ_QUEUE_NAME: ${RABBITMQ_QUEUE_NAME}
      PORT: ${PORT}
    ports:
      - "${PORT}:${PORT}"
    # volumes:
    #   - ./api:/app
    #   - /app/node_modules
    restart: unless-stopped
    networks:
      - app-network

  worker:
    build:
      context: ./worker
      dockerfile: Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      NODE_ENV: ${NODE_ENV}
      DATABASE_URL: ${DATABASE_URL}
      RABBITMQ_URL: ${RABBITMQ_URL}
      RABBITMQ_QUEUE_NAME: ${RABBITMQ_QUEUE_NAME}
      WORKER_TIMEOUT: ${WORKER_TIMEOUT}
      MAX_RETRIES: ${MAX_RETRIES}
    # volumes:
    #   - ./worker:/app
    #   - /app/node_modules
    deploy:
      replicas: 2
    restart: unless-stopped
    networks:
      - app-network

volumes:
  postgres_data:
  rabbitmq_data:

networks:
  app-network:
    driver: bridge